Only in Tomato/: .readme.otl.swp
Only in Potato/: README.md
diff -bur Potato/csvNameFile.txt Tomato/csvNameFile.txt
--- Potato/csvNameFile.txt	2018-08-10 15:12:20.000000000 -0500
+++ Tomato/csvNameFile.txt	2018-09-01 12:46:43.000000000 -0500
@@ -1,2 +1,2 @@
-potatoes_model_data_2016.csv
-potato
+tomatoes_model_data_2017.csv
+tomato
Only in Tomato/dataFiles: .examineData.py.swp
Only in Tomato/dataFiles: .potato_with_anomaly.csv.swp
Only in Tomato/dataFiles: .potatoes_model_data_2016.csv.swp
Only in Tomato/dataFiles: .sweetcorn_model_data_2013.csv.swp
Only in Tomato/dataFiles: .tomatoes_model_data_2017.csv.swp
diff -bur Potato/dataFiles/catalog.R Tomato/dataFiles/catalog.R
--- Potato/dataFiles/catalog.R	2018-10-11 22:25:13.000000000 -0500
+++ Tomato/dataFiles/catalog.R	2018-09-03 17:29:23.000000000 -0500
@@ -1,5 +1,6 @@
-# This lists the model formulas for all linear formulations of temperature, each
-# formulation considering one particular combination of variants
+    yield_prediction_csv_1 <- "./tave_potato.csv"
+    rmse_csv_1 <- "./tave_potato_rmse.csv"
+
     model_formulas_1 <- c('yield_ana ~ tave5 + tave6 + tave7 + FIPS', 'yield_ana ~ tave5 + tave6 + tave8 + FIPS', 'yield_ana ~ tave5 + tave6 + tave9 + FIPS', 'yield_ana ~ tave5 + tave7 + tave8 + FIPS', 'yield_ana ~ tave5 + tave7 + tave9 + FIPS', 'yield_ana ~ tave5 + tave8 + tave9 + FIPS', 'yield_ana ~ tave6 + tave7 + tave8 + FIPS', 'yield_ana ~ tave6 + tave7 + tave9 + FIPS', 'yield_ana ~ tave6 + tave8 + tave9 + FIPS', 'yield_ana ~ tave7 + tave8 + tave9 + FIPS', 'yield_ana ~ tave5 + tave6 + tave7 + tave8 + FIPS', 'yield_ana ~ tave5 + tave6 + tave7 + tave9 + FIPS', 'yield_ana ~ tave5 + tave6 + tave8 + tave9 + FIPS', 'yield_ana ~ tave5 + tave7 + tave8 + tave9 + FIPS', 'yield_ana ~ tave6 + tave7 + tave8 + tave9 + FIPS', 'yield_ana ~ tave5 + tave6 + tave7 + tave8 + tave9 + FIPS')
 
 
@@ -14,9 +15,6 @@
     yield_prediction_csv_2 <- "./precip_potato.csv"
     rmse_csv_2 <- "./precip_potato_rmse.csv"
 
-    ##########################
-# This does the same as the setup above but, this time, with precipitation
-
     model_formulas_2 <- c('yield_ana ~ precip5 + precip6 + precip7 + FIPS', 'yield_ana ~ precip5 + precip6 + precip8 + FIPS', 'yield_ana ~ precip5 + precip6 + precip9 + FIPS', 'yield_ana ~ precip5 + precip7 + precip8 + FIPS', 'yield_ana ~ precip5 + precip7 + precip9 + FIPS', 'yield_ana ~ precip5 + precip8 + precip9 + FIPS', 'yield_ana ~ precip6 + precip7 + precip8 + FIPS', 'yield_ana ~ precip6 + precip7 + precip9 + FIPS', 'yield_ana ~ precip6 + precip8 + precip9 + FIPS', 'yield_ana ~ precip7 + precip8 + precip9 + FIPS', 'yield_ana ~ precip5 + precip6 + precip7 + precip8 + FIPS', 'yield_ana ~ precip5 + precip6 + precip7 + precip9 + FIPS', 'yield_ana ~ precip5 + precip6 + precip8 + precip9 + FIPS', 'yield_ana ~ precip5 + precip7 + precip8 + precip9 + FIPS', 'yield_ana ~ precip6 + precip7 + precip8 + precip9 + FIPS', 'yield_ana ~ precip5 + precip6 + precip7 + precip8 + precip9 + FIPS')
 
 
@@ -32,7 +30,6 @@
     yield_prediction_csv_3 <- "./vpdave_potato.csv"
     rmse_csv_3 <- "./vpdave_potato_rmse.csv"
 
-# Same as above but this time with vpdave
     model_formulas_3 <- c('yield_ana ~ vpdave5 + vpdave6 + vpdave7 + FIPS', 'yield_ana ~ vpdave5 + vpdave6 + vpdave8 + FIPS', 'yield_ana ~ vpdave5 + vpdave6 + vpdave9 + FIPS', 'yield_ana ~ vpdave5 + vpdave7 + vpdave8 + FIPS', 'yield_ana ~ vpdave5 + vpdave7 + vpdave9 + FIPS', 'yield_ana ~ vpdave5 + vpdave8 + vpdave9 + FIPS', 'yield_ana ~ vpdave6 + vpdave7 + vpdave8 + FIPS', 'yield_ana ~ vpdave6 + vpdave7 + vpdave9 + FIPS', 'yield_ana ~ vpdave6 + vpdave8 + vpdave9 + FIPS', 'yield_ana ~ vpdave7 + vpdave8 + vpdave9 + FIPS', 'yield_ana ~ vpdave5 + vpdave6 + vpdave7 + vpdave8 + FIPS', 'yield_ana ~ vpdave5 + vpdave6 + vpdave7 + vpdave9 + FIPS', 'yield_ana ~ vpdave5 + vpdave6 + vpdave8 + vpdave9 + FIPS', 'yield_ana ~ vpdave5 + vpdave7 + vpdave8 + vpdave9 + FIPS', 'yield_ana ~ vpdave6 + vpdave7 + vpdave8 + vpdave9 + FIPS', 'yield_ana ~ vpdave5 + vpdave6 + vpdave7 + vpdave8 + vpdave9 + FIPS')
 
 
@@ -44,24 +41,45 @@
     uses_evi_3 <- c("N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N")
     uses_lstmax_3 <- c("N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N")
 
+    yield_prediction_csv_list <- list(yield_prediction_csv_1,yield_prediction_csv_2,yield_prediction_csv_3)
+    rmse_csv_list <- list(rmse_csv_1,rmse_csv_2,rmse_csv_3)
+    model_formulas_list <- list(model_formulas_1,model_formulas_2,model_formulas_3)
+    model_names_list <- list(model_names_1,model_names_2,model_names_3)
+    fitting_functions_list <- list(fitting_functions_1,fitting_functions_2,fitting_functions_3)
+    uses_evi_list <- list(uses_evi_1,uses_evi_2,uses_evi_3)
+    uses_lstmax_list <- list(uses_lstmax_1,uses_lstmax_2,uses_lstmax_3)
+    uses_FIPS_list <- list(uses_FIPS_1,uses_FIPS_2,uses_FIPS_3)
+    
+
+
+
+    #______________
+    yield_prediction_csv_1 <- "./yan_combinations_potato.csv"
+    rmse_csv_1 <- "./yan_combinations_potato_rmse.csv"
+
+    # Specify the model formulas that we wish to test
+    model_formulas_1 <- c("yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + precip5 +  precip6 +  precip7 +  precip8 + FIPS", "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS", "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + precip5 +  precip6 +  precip7 +  precip8 + FIPS", "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS", "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2)")
+
+
+    # For each of the model formulas that we specified above, give each model configuration a name
+    model_names_1 <- c('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P')
+    
+    # For each of the model formulas, determine whether we will fit the model using lm or using lmer
+    # Note that lm is the ordinary OLS function and lmer the hierarchical model function
+    fitting_functions_1 <- c("lm","lm","lm","lm","lm","lm","lm","lm","lm","lm","lm","lm","lm","lm","lm","lm")
+
+    # For each of the model formulas, specify whether the model formula uses FIPS or not, and then evi and then lst
+    uses_FIPS_1 <- c("Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y","Y")
+    uses_evi_1 <- c("N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N")
+    uses_lstmax_1 <- c("N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N")
+
+    yield_prediction_csv_list <- list(yield_prediction_csv_1)
+    rmse_csv_list <- list(rmse_csv_1)
+    model_formulas_list <- list(model_formulas_1)
+    model_names_list <- list(model_names_1)
+    fitting_functions_list <- list(fitting_functions_1)
+    uses_evi_list <- list(uses_evi_1)
+    uses_lstmax_list <- list(uses_lstmax_1)
+    uses_FIPS_list <- list(uses_FIPS_1)
+    
 
-    # VPD + PRECIP (Linear and Quadratic Combinations)
-    "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + precip5 +  precip6 +  precip7 +  precip8 + FIPS"
-    "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS"
-    "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + precip5 +  precip6 +  precip7 +  precip8 + FIPS"
-    "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS"
-
-    # TAVE + PRECIP (Linear and Quadratic Combinations)
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS"
-    # TAVE + VPDVE + PRECIP (Linear and Quadratic Combinations)
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS"
-    "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2)"
Only in Potato/dataFiles: potato_with_anomaly.csv
Only in Tomato/dataFiles/predictionResultFrames: .precip_potato.csv.swp
Only in Tomato/dataFiles/predictionResultFrames: .precip_potato_rmse.csv.swp
Only in Tomato/dataFiles/predictionResultFrames: .tave_potato.csv.swp
Only in Tomato/dataFiles/predictionResultFrames: .tave_potato_rmse.csv.swp
Only in Tomato/dataFiles/predictionResultFrames: .vpdave_potato.csv.swp
Only in Tomato/dataFiles/predictionResultFrames: .vpdave_potato_rmse.csv.swp
Only in Tomato/dataFiles/predictionResultFrames: .yan_combinations_potato.csv.swp
Only in Tomato/dataFiles/predictionResultFrames: .yan_combinations_potato_rmse.csv.swp
Only in Potato/dataFiles/predictionResultFrames: precip_potato.csv
Only in Potato/dataFiles/predictionResultFrames: precip_potato_rmse.csv
Only in Tomato/dataFiles/predictionResultFrames: precip_tomato.csv
Only in Tomato/dataFiles/predictionResultFrames: precip_tomato_rmse.csv
Only in Potato/dataFiles/predictionResultFrames: tave_potato.csv
Only in Potato/dataFiles/predictionResultFrames: tave_potato_rmse.csv
Only in Tomato/dataFiles/predictionResultFrames: tave_tomato.csv
Only in Tomato/dataFiles/predictionResultFrames: tave_tomato_rmse.csv
Only in Potato/dataFiles/predictionResultFrames: vpdave_potato.csv
Only in Potato/dataFiles/predictionResultFrames: vpdave_potato_rmse.csv
Only in Tomato/dataFiles/predictionResultFrames: vpdave_tomato.csv
Only in Tomato/dataFiles/predictionResultFrames: vpdave_tomato_rmse.csv
Only in Potato/dataFiles/predictionResultFrames: yan_combinations_potato.csv
Only in Potato/dataFiles/predictionResultFrames: yan_combinations_potato_rmse.csv
Only in Tomato/dataFiles/predictionResultFrames: yan_combinations_tomato.csv
Only in Tomato/dataFiles/predictionResultFrames: yan_combinations_tomato_rmse.csv
diff -bur Potato/dataFiles/preprocessData.py Tomato/dataFiles/preprocessData.py
--- Potato/dataFiles/preprocessData.py	2018-10-11 22:31:16.000000000 -0500
+++ Tomato/dataFiles/preprocessData.py	2018-09-01 12:17:27.000000000 -0500
@@ -8,32 +8,16 @@
 homePath = os.getcwd()
 
 def yield_trend(df, yield_type='rainfed'):
-    '''
-    Detrend a data frame using some function (ie quadratic or linear).
-    param df: A raw data frame 
-    param yield_type: The type of yield that we wish to detrend on
-    '''
+    # Estimate yield trend and detrend
     trend_model_txt =  "Q('%s')"%"yield" + "~ np.power(year,2) + year"
     trend_results = smf.ols(trend_model_txt, data=df).fit()
     return trend_results
 
 def endueAnomaly(D, trend_results):
-    '''
-    Give a data frame a yield anomaly.
-    param D: A preprocessed data frame
-    param trend_results: The fitted yield_trend function
-    return: D, A preprocessed data frame with yield anomaly now defined
-    '''
     D["yield_ana"] = D["yield"] - trend_results.predict(D)
     return D
 
-def preprocesData():
-    '''
-    Read the appropriate csv (depending on the crop we're examining) and preprocess it.
-    Then save it as "Crop Name"_with_anomaly.csv
-    return: The preprocessed data file
-    '''
-    # Get the file from the
+def readFile():
     os.chdir("../")
     with open("csvNameFile.txt") as f:
         content = f.readlines()
@@ -41,7 +25,6 @@
     cropName = content[1].strip()
 
 
-    # After getting a string from a file in a different directory, change back to our directory
     os.chdir("../dataFiles")
     data = pd.read_csv(content[0].strip())
     os.chdir(homePath)
@@ -86,5 +69,5 @@
     return data
 
 if __name__ == "__main__":
-    D = preprocesData()
+    D = readFile()
     
Only in Tomato/dataFiles: tomato_with_anomaly.csv
Only in Tomato/predictionCode: .examineData.py.swp
Only in Tomato/predictionCode: .formulaMaker.py.swp
Only in Tomato/predictionCode: .formulaMaker_scratch.py.swp
Only in Tomato/predictionCode: .potato_model_inR.R.swp
Only in Tomato/predictionCode: .potato_python_model.py.swp
Only in Tomato/predictionCode: .potato_python_model_2.py.swp
Only in Tomato/predictionCode: .printStats.py.swp
Only in Tomato/predictionCode: .python_temp_model_A.swp
diff -bur Potato/predictionCode/crop_model_inR.R Tomato/predictionCode/crop_model_inR.R
--- Potato/predictionCode/crop_model_inR.R	2018-09-07 16:00:29.000000000 -0500
+++ Tomato/predictionCode/crop_model_inR.R	2018-09-11 20:23:37.000000000 -0500
@@ -1,3 +1,6 @@
+
+
+#TODO
 rm(list=ls())
 #Add desired packages
 require(lme4)
@@ -6,10 +9,11 @@
 require(magrittr)
 
 # Define the sequence of years in our dataset
-# These are potato specific years
-year = seq(from = 1981, to = 2016);
+# These are tomato specific years
+year = seq(from = 1992, to = 2017);
 # Define the sequence of years over which we make predictions in our dataset
-pred.year = seq(from=23, to=36)
+pred.year = seq(from=12, to=26)
+numberYears <- 15
 
 
 # Define the RMSE of two vectors
@@ -30,7 +34,7 @@
     results <- read.csv(yield_prediction_csv)
 
     # In the  columns that belong to the dataframe read from yield_prediction_csv, the yield predictions of the first model are stored at column index 8
-    # Recall that what r refers to as index 8, python refers to as index 7
+    # Recall that what refres to as index 8, python refers to as index 7
     firstModelIndex <- 8
     # Get the names of the various models whose yield predictions are stored in yield_prediction_csv
     model_names <- colnames(results[firstModelIndex:length(colnames(results))])
@@ -38,8 +42,7 @@
     lastModelIndex <- firstModelIndex + length(model_names) - 1
 
 
-    # There are 14 testing years from 2003 to 2016
-    numberYears <- 14
+    # There are 15 testing years from 2003 to 2017
     # Make the matrix that stores the RMSE, for each testing year for each model 
     model_rmse_mat <- matrix(, nrow = numberYears, ncol = length(model_names))
 
@@ -89,7 +92,7 @@
 {
     # In[3]:
 
-    mydata <- read.csv("../dataFiles/potato_with_anomaly.csv")
+    mydata <- read.csv("../dataFiles/sweetcorn_with_anomaly.csv")
 
     # Suppose that you wanted to scale the dataset in some way before working with it.
     # To do so, we first store in a vector boolean values that indicate whether a column in mydata is true or false
@@ -108,11 +111,8 @@
     #mydata[ind] <- scale(mydata[ind])
     
 
-    # The states that follow are those states that belong to potato
-    all_states <- c('COLORADO', 'IDAHO', 'MAINE', 'MINNESOTA', 'MONTANA', 'OREGON',
-     'WISCONSIN', 'WASHINGTON', 'PENNSYLVANIA', 'NORTH DAKOTA',
-     'ARIZONA', 'NEW JERSEY', 'NORTH CAROLINA', 'ALABAMA', 'MICHIGAN',
-     'NEW MEXICO', 'UTAH', 'VIRGINIA')
+    # The states that follow are those states that belong to tomato
+    all_states <- c('CALIFORNIA','OHIO')
 
 
 
@@ -126,30 +126,11 @@
     test_region <- all_states
 
 
-    # Give names to the CSVs in which we will, firstly, store the results of predictions and, secondly, in which we will store the RMSEs that we calculate for these
-    # predictions.
-
-    yield_prediction_csv_1 <- "./yan_combinations_potato.csv"
-    rmse_csv_1 <- "./yan_combinations_potato_rmse.csv"
+    yield_prediction_csv_1 <- "./yan_combinations_tomato.csv"
+    rmse_csv_1 <- "./yan_combinations_tomato_rmse.csv"
 
     # Specify the model formulas that we wish to test
-    model_formulas_1 <- c(
-                          "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + precip5 +  precip6 +  precip7 +  precip8 + FIPS",
-                          "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS",
-                          "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + precip5 +  precip6 +  precip7 +  precip8 + FIPS",
-                          "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS",
-                          "yield_ana ~ tave5 +  tave6 +  tave7 +  tave8 + I(tave5^2) + I(tave6^2) + I(tave7^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2)")
+    model_formulas_1 <- c("yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + precip5 +  precip6 +  precip7 +  precip8 + FIPS", "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS", "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + precip5 +  precip6 +  precip7 +  precip8 + FIPS", "yield_ana ~ vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + precip5 +  precip6 +  precip7 +  precip8 + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + I(tave5^2) + I(tave6^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + I(tave5^2) + I(tave6^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + I(tave5^2) + I(tave6^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + I(tave5^2) + I(tave6^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + I(tave5^2) + I(tave6^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2) + FIPS", "yield_ana ~ tave5 + tave6 + tave8 + I(tave5^2) + I(tave6^2) + I(tave8^2) + precip5 +  precip6 +  precip7 +  precip8 + I(precip5^2) + I(precip6^2) + I(precip7^2) + I(precip8^2) + vpdave5 +  vpdave6 +  vpdave7 +  vpdave8 + I(vpdave5^2) + I(vpdave6^2) + I(vpdave7^2) + I(vpdave8^2)")
 
 
     # For each of the model formulas that we specified above, give each model configuration a name
@@ -164,12 +145,6 @@
     uses_evi_1 <- c("N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N")
     uses_lstmax_1 <- c("N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N")
 
-
-    # Each of the following list suffixed variables is a list that stores as many variables as model experiments that we want to run
-    # By model experiment, I refer to the collection of model configurations that one wants to test in one run of this code.
-    # For example, we may wish to test model configurations using precip in one run and then model configurations using tave in another run
-    # The model configurations, within the model experiment, using precip may be yield ~ precip5 + precip6 + precip7 + FIPS or yield ~ precip6 + precip7 + precip8 + FIPS
-
     yield_prediction_csv_list <- list(yield_prediction_csv_1)
     rmse_csv_list <- list(rmse_csv_1)
     model_formulas_list <- list(model_formulas_1)
@@ -180,7 +155,6 @@
     uses_FIPS_list <- list(uses_FIPS_1)
 
 
-
     # The number of model configurations that we wish to test 
     number_models <- length(yield_prediction_csv_list)
 
@@ -211,18 +185,18 @@
             # Get the start time for a particular model_formula
             startTime <- Sys.time()
             print(model_names[j])
-            # These are potato specific years
-            endYear <- 2016
-            startYear <- 1981
-            for (i in 1:14){
+            # These are tomato specific years
+            endYear <- 2017
+            startYear <- 1992
+            for (i in 1:numberYears){
 
                 # v is the vector of years across which we will train our data
                 if (i == 1)
                 {
-                    v <- c(1981:2002, 2004:endYear)
+                    v <- c(startYear:2002, 2004:endYear)
                 }
 
-                else if (i == 14)
+                else if (i == numberYears)
                 {
                     v <- startYear:year[pred.year[i-1]]
                 }
@@ -264,9 +238,8 @@
                 # In what follows, we use the assumption that
                 # tave5 is null iff precip5 is null iff tave5 is null
                 # and that any one variant of a predictor (see the readme in the main directory) is null iff all other variants are null
-                # This is at least potato specific and possibly applicable to other crops
+                # This is at least tomato specific and possibly applicable to other crops
                 # But that assumption must be checked using examineData.py
-
                 data.train <- data.train[!is.na(data.train$'tave5'),]
                 data.test <- data.test[!is.na(data.test$'tave5'),]
 
@@ -297,7 +270,7 @@
 
                 # For the final year involved in prediction, we save some attributes. For example, we store the 
                 # coefficients that the fitted function has and we make some diagnostic plots as well
-                if (i == 14)
+                if (i == numberYears)
                 {
                     s <- capture.output(summary(model_function))
                     coeff <- capture.output(coef(model_function))
@@ -341,10 +314,10 @@
 
 
             # Make one data frame by binding together the test data frames from 2003 to 2016
-            allTestData <- rbind.data.frame(data.test2003,data.test2004,data.test2005,data.test2006,data.test2007,data.test2008, data.test2009, data.test2010, data.test2011, data.test2012, data.test2013, data.test2014, data.test2015, data.test2016)
+            allTestData <- rbind.data.frame(data.test2003,data.test2004,data.test2005,data.test2006,data.test2007,data.test2008, data.test2009, data.test2010, data.test2011, data.test2012, data.test2013, data.test2014, data.test2015, data.test2016,data.test2017)
 
             # Make one vector by binding together the results of predicting on test data frames from 2003 to 2016
-            predictions[[j]] <- c(func.pred2003,func.pred2004,func.pred2005,func.pred2006,func.pred2007,func.pred2008, func.pred2009, func.pred2010, func.pred2011, func.pred2012, func.pred2013, func.pred2014, func.pred2015, func.pred2016)
+            predictions[[j]] <- c(func.pred2003,func.pred2004,func.pred2005,func.pred2006,func.pred2007,func.pred2008, func.pred2009, func.pred2010, func.pred2011, func.pred2012, func.pred2013, func.pred2014, func.pred2015, func.pred2016, func.pred2017)
             predictionFrame <- data.frame(predictions[[j]])
             # Combine the predictionFrame data frame with allTestData's data frame and then save it with the name model_name[j]
             # This is done because if this code executes to completion, then it saves a dataframe containing the prediction results for all tested models in the model
@@ -412,3 +385,5 @@
 
 options(warn=1)
 initialize()
+
+
diff -bur Potato/predictionCode/formulaMaker.py Tomato/predictionCode/formulaMaker.py
--- Potato/predictionCode/formulaMaker.py	2018-10-11 22:41:11.000000000 -0500
+++ Tomato/predictionCode/formulaMaker.py	2018-09-01 12:17:27.000000000 -0500
@@ -1,19 +1,5 @@
 
-def addFixedEffects_excl(desiredComponents, formulaString=""):
-    '''
-    Using only months months from may to august, create strings for certain
-    predictors for use in model with fixed effects. Do NOT add linear terms
-    if we desire a quadratic effect.
-
-    param desiredComponents: The fixed effect predictors that we wish to use. See
-    terminology for an explanation of what I mean by "predictors."
-
-    param formulaString: A model configuration string that is being added to by this
-    function.
-
-    return: The concatenation of strings needed to express desiredComponents with
-    formulaString
-    '''
+def addFixedEffects(desiredComponents, formulaString=""):
     theLength = len(desiredComponents)
     for counter, component in enumerate(desiredComponents):
         if component == "TAVE":
@@ -34,22 +20,7 @@
             formulaString += " + "
     return formulaString
 
-def addFixedEffects(desiredComponents, formulaString=""):
-    '''
-    Using only months months from may to august, create strings for certain
-    predictors for use in model with fixed effects. Do add linear terms
-    if we desire a quadratic effect.
-
-    param desiredComponents: The fixed effect predictors that we wish to use. See
-    terminology for an explanation of what I mean by "predictors."
-
-    param formulaString: A model configuration string that is being added to by this
-    function.
-
-    return: The concatenation of strings needed to express desiredComponents with
-    formulaString
-    '''
-
+def addYanCombinations(desiredComponents, formulaString=""):
     theLength = len(desiredComponents)
     for counter, component in enumerate(desiredComponents):
         if component == "TAVE":
@@ -76,7 +47,11 @@
 def printString(fixedEffects, randomStateEffects, randomStateFIPSEffects):
     formulaString = "\"yield_ana ~ "
     if (fixedEffects != []):
-        formulaString += addFixedEffects(fixedEffects)
+        formulaString += addYanCombinations(fixedEffects)
+    if (randomStateEffects != []):
+        formulaString += " + " + addRandomStateEffects(randomStateEffects)
+    if (randomStateFIPSEffects != []):
+        formulaString += " + " + addRandomStateFIPSEffects(randomStateFIPSEffects)
     formulaString += "\""
     print(formulaString)
 
@@ -85,9 +60,11 @@
     fixedEffects = [["VPD","PRECIP"],["VPD","PRECIP2"],["VPD2","PRECIP"],["VPD2","PRECIP2"],
     ["TAVE","PRECIP"],["TAVE","PRECIP2"],["TAVE2","PRECIP"],["TAVE2","PRECIP2"],
     ["TAVE","PRECIP","VPD"],["TAVE","PRECIP2","VPD"],["TAVE2","PRECIP","VPD"],["TAVE2","PRECIP2","VPD"],["TAVE","PRECIP","VPD2"],["TAVE","PRECIP2","VPD2"],["TAVE2","PRECIP","VPD2"],["TAVE2","PRECIP2","VPD2"]]
+    randomStateEffects = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
+    randomStateFIPSEffects = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
     for i in range(len(fixedEffects)):
         print()
-        printString(fixedEffects[i])
+        printString(fixedEffects[i], randomStateEffects[i], randomStateFIPSEffects[i])
         print()
 
     
diff -bur Potato/predictionCode/formulaMaker_scratch.py Tomato/predictionCode/formulaMaker_scratch.py
--- Potato/predictionCode/formulaMaker_scratch.py	2018-10-11 22:44:53.000000000 -0500
+++ Tomato/predictionCode/formulaMaker_scratch.py	2018-09-01 12:17:27.000000000 -0500
@@ -1,18 +1,5 @@
 
 def addFixedEffects(desiredComponents, formulaString=""):
-    '''
-    Given a list of variants of predictors to add, render them into a model
-    configuration string for use in Python or R, by interleaving the strings of
-    variants with "+"
-
-    param desiredComponents: An iterable of strings of variants of predictors to make
-    a model configuration from
-    param: An existing model configuration string (formula string) to append to
-
-    return: The result of appending the passed in string with the formula string
-    obtained by rendering variants in desiredComponents into a string
-    '''
-
     theLength = len(desiredComponents)
     formulaString = "yield_ana ~ "
     for counter, component in enumerate(desiredComponents):
diff -bur Potato/predictionCode/printStats.py Tomato/predictionCode/printStats.py
--- Potato/predictionCode/printStats.py	2018-10-11 22:55:25.000000000 -0500
+++ Tomato/predictionCode/printStats.py	2018-09-05 10:37:31.000000000 -0500
@@ -5,12 +5,12 @@
 homePath = os.getcwd()
 
 
+# After specifying the rmse csv files, this simple function calculates the median for each
+# set of files
 def printRMSEMedian():
-    '''
-    After specifying the rmse csv files (ie those files in which we stored the rmses of 
-    function predictions), calculate and print the median for each
-    set of files
-    '''
+    # csvFiles = ["vpd_tave_rmse.csv", "precip_evi_rmse.csv", "tave_evi_rmse.csv",
+            # "vpd_evi_rmse.csv", "tave_precip_rmse.csv", "vpd_precip_rmse.csv"]
+    # csvFiles = ["vpd_evi_tave_nested_rmse_loo_square.csv","vpd_evi_tave_nested_rmse_loo_square_2.csv", "tave_vpd_evi_rmse_loo_square.csv"]
     csvFiles = ["tave_evi_squared_rmse.csv"]
 
     for file in csvFiles:
@@ -19,16 +19,6 @@
         print(A.median())
 
 def calculateR2Python(csvFiles):
-    '''
-    Background: Yan's python prediction code saved predictions into a column called
-    "Predicted_yield_ana." Other code then compared these predictions with entries in a column
-    called "yield_ana" in order to compute statistics like RMSE, R^2 etc. This function
-    performs these computations and prints the resulting statistics for a passed in
-    set of filenames that correspond to csvs obtained from, among other sources, performing predictions using
-    Yan's prediction code. Really, these csvs can have been obtained from anywhere; they must have a "Predicted_yield_ana" field and a "yield_ana" field.
-
-    param: csvFiles: An iterable consisting of strings of csv file names; in these csvs predicted yields have been stored.
-    '''
     for aFile in csvFiles:
         modelFrame = pd.read_csv(aFile)
         # Get the column names from the data frame
@@ -64,19 +54,6 @@
             print(result.median()['R2'])
 
 def calculateR2(csvFiles):
-    '''
-    Background: Aahan's prediction code saved predictions for a certain model into a column
-    with the same name of the model. Note that Aahan's predictions were "predicted_yield"
-    and not "predicted_yield_ana" -- that is, his R code adds back the yield anomaly.
-
-    Other code then compared these predictions with entries in a columnk
-    called "yield" in order to compute statistics like RMSE, R^2 etc. This function
-    performs these computations and prints the resulting statistics for a passed in
-    set of filenames that correspond to csvs obtained from, among other sources, performing predictions using
-    Aahan's R prediction code. Really, these csvs can have been obtained from anywhere; they must have only predicted total yields in columns starting at the 7th (counting off from 0) index and a "yield" field.
-
-    param: csvFiles: An iterable consisting of strings of csv file names; in these csvs predicted yields have been stored.
-    '''
     indexOfFirstModel = 7
     for aFile in csvFiles:
         modelFrame = pd.read_csv(aFile)
@@ -86,7 +63,7 @@
 
             result = pd.DataFrame(np.full([modelFrame['year'].unique().shape[0],3], np.nan), index=modelFrame['year'].unique(), columns=['R2','rmse','R2_classic'])
 
-            for y in range(modelFrame['year'].min(), modelFrame['year'].max()+1):
+            for y in modelFrame['year'].unique():
                 con = modelFrame['year']==y
                 yieldType = "yield"
                 r2_temp = modelFrame.loc[con,[yieldType, \
@@ -109,12 +86,117 @@
                 result.loc[y] = [r2_temp, rmse_temp, 1-sse/sst]
             print(model)
             # print(result)
-            print(result.median()['rmse'])
-            print(result.median()['R2'])
+            print(round(result.median()['rmse'],3))
+            print(round(result.median()['R2'],3))
+
 
 
+# def calculateR2Emergency(csvFiles):
+    # indexOfFirstModel = 1
+    # for aFile in csvFiles:
+        # modelFrame = pd.read_csv(aFile)
+        # # Get the column names from the data frame
+        # colNames = list(modelFrame)
+        # model = colNames[indexOfFirstModel]
+
+        # result = pd.DataFrame(np.full([modelFrame['year'].unique().shape[0],3], np.nan), index=modelFrame['year'].unique(), columns=['R2','rmse','R2_classic'])
+
+        # for y in range(modelFrame['year'].min(), modelFrame['year'].max()+1):
+            # con = modelFrame['year']==y
+            # yieldType = "yield_rainfed_ana"
+            # r2_temp = modelFrame.loc[con,[yieldType, \
+                                    # model]].corr() \
+                # [model][0]**2
+            
+            # # N is the sample number after removing nan
+            # N = modelFrame.loc[con,[yieldType,model]].dropna().shape[0]
+            # rmse_temp = (((modelFrame.loc[con, model] -  \
+                              # modelFrame.loc[con, yieldType])**2).sum() \
+                                          # /N)**0.5
+                                      # #    /modelFrame.loc[con,yieldType].shape[0])**0.5
+                         
+    # #                                       /modelFrame.loc[con,model].shape[0])**0.5
+
+            # sst = ((modelFrame.loc[con, yieldType] \
+                    # - modelFrame.loc[con, yieldType].mean())**2).sum()
+            # sse = ((modelFrame.loc[con, yieldType] - modelFrame.loc[con, model])**2).sum()
+
+            # result.loc[y] = [r2_temp, rmse_temp, 1-sse/sst]
+        # print(model)
+        # # print(result)
+        # print(result)
+        # statsCSV = "./statsDirectory/" + str(aFile) + "_stats.csv"
+        # result.to_csv(statsCSV)
+        # print(result.median()['rmse'])
+        # print(result.median()['R2'])
+
+# def calculateR2EmergencyYan(csvFiles):
+    # for aFile in csvFiles:
+        # modelFrame = pd.read_csv(aFile)
+        # # Get the column names from the data frame
+        # colNames = list(modelFrame)
+        # model = "Predicted_yield_rainfed_ana"
+
+        # result = pd.DataFrame(np.full([modelFrame['year'].unique().shape[0],3], np.nan), index=modelFrame['year'].unique(), columns=['R2','rmse','R2_classic'])
+
+        # for y in range(modelFrame['year'].min(), modelFrame['year'].max()+1):
+            # con = modelFrame['year']==y
+            # yieldType = "yield_rainfed_ana"
+            # r2_temp = modelFrame.loc[con,[yieldType, \
+                                    # model]].corr() \
+                # [model][0]**2
+            
+            # # N is the sample number after removing nan
+            # N = modelFrame.loc[con,[yieldType,model]].dropna().shape[0]
+            # rmse_temp = (((modelFrame.loc[con, model] -  \
+                              # modelFrame.loc[con, yieldType])**2).sum() \
+                                          # /N)**0.5
+                                      # #    /modelFrame.loc[con,yieldType].shape[0])**0.5
+                         
+    # #                                       /modelFrame.loc[con,model].shape[0])**0.5
+
+            # sst = ((modelFrame.loc[con, yieldType] \
+                    # - modelFrame.loc[con, yieldType].mean())**2).sum()
+            # sse = ((modelFrame.loc[con, yieldType] - modelFrame.loc[con, model])**2).sum()
+
+            # result.loc[y] = [r2_temp, rmse_temp, 1-sse/sst]
+        # print(model)
+        # # print(result)
+        # print(result)
+        # print(result.median()['rmse'])
+        # print(result.median()['R2'])
 
+# def calculateTotalYield():
+    # D = pd.read_csv("vpd_spline_evi_poly")
+    # D = D.loc[~pd.isnull(D["yield_rainfed"]),:]
+    # df = pd.DataFrame(index=[i for i in range(2003,2017,1)],columns=["Predicted National Rainfed Yield", "Actual National Rainfed Yield", "100 * (Predicted - Actual)/Actual"])
+    # df = df.fillna(0)
+    # for year in range(2003,2017,1):
+        # C = D.loc[D["year"] == year,:]
+        # predQuant = C["Predicted_yield_rainfed"]
+        # yieldQuant = C["yield_rainfed"]
+        # areaQuant = C["area_rainfed"]
+        # print(("{:,}".format(np.dot(yieldQuant, areaQuant)),"{:,}".format(np.dot(predQuant, areaQuant))))
+        # actualYield = np.dot(yieldQuant, areaQuant)
+        # predictedYield = np.dot(predQuant, areaQuant)
+        # actualYield_str = "{:,}".format(actualYield)
+        # predictedYield_str = "{:,}".format(predictedYield)
+        # df.loc[year,:] = predictedYield_str, actualYield_str, ((predictedYield/actualYield) - 1) * 100
+    # print(df)
+    # print(os.getcwd())
+    # df.to_csv("national_yield_stats.csv")
+
+# def printRelativeYield(csvFiles):
+    # os.chdir("../dataFiles")
+    # D = pd.read_csv("soybean_handled_dataset")
+    # yearRange = range(2003,2017,1)
+    # for aFile in csvFiles:
+        # for year in yearRange:
+            # E = D[D["year"] == year]
 
 
 if __name__ == "__main__":
-    calculateR2Python(["python_temp_model_A"])
+    os.chdir("../predictionCode")
+    # calculateR2(["tave_tomato.csv","precip_tomato.csv","vpdave_tomato.csv"])
+    calculateR2(["yan_combinations_tomato.csv"])
+    os.chdir(homePath)
Only in Potato/predictionCode: python_temp_model_A
Only in Tomato/: readme.otl
Only in Potato/visualizationCode: .showTrend.py.swp
Binary files Potato/visualizationCode/figures/figure_yield_response_lowess.png and Tomato/visualizationCode/figures/figure_yield_response_lowess.png differ
Only in Tomato/visualizationCode/figures/scatterPlots: .scatter_plot_yield_against_P.png.swp
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_A.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_A.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_B.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_B.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_C.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_C.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_D.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_D.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_E.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_E.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_F.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_F.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_G.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_G.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_H.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_H.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_I.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_I.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_J.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_J.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_K.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_K.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_L.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_L.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_M.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_M.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_N.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_N.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_O.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_O.png differ
Binary files Potato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_P.png and Tomato/visualizationCode/figures/scatterPlots/scatter_plot_yield_against_P.png differ
diff -bur Potato/visualizationCode/makeScatter_predictedActual.py Tomato/visualizationCode/makeScatter_predictedActual.py
--- Potato/visualizationCode/makeScatter_predictedActual.py	2018-10-11 22:59:05.000000000 -0500
+++ Tomato/visualizationCode/makeScatter_predictedActual.py	2018-09-05 10:45:07.000000000 -0500
@@ -9,17 +9,15 @@
 homePath = os.getcwd()
 
 def readFile():
-    '''
-    Read the csv storing the predictions that yan desired into a data frame
-    and return it.
-    '''
     os.chdir("../")
     with open("csvNameFile.txt") as f:
         content = f.readlines()
     os.chdir(homePath)
 
 
+    os.chdir("../dataFiles")
     cropName = content[1].strip()
+    os.chdir(homePath)
     os.chdir("../dataFiles/predictionResultFrames")
     D = pd.read_csv("yan_combinations_"+cropName+".csv")
     os.chdir(homePath)
@@ -30,23 +28,20 @@
 
 if __name__ == "__main__":
     data = readFile()
-    # Define the first index of a column containing prediction data
     firstIndex = 7
-    # Define the last index of a column containing prediction data
     lastIndex = firstIndex + 16
     colNames = list(data)
-    # Plot the actual yield versus predicted yield for each model configuration
-    # that falls between firstIndex and lastIndex (inclusive of endpoints) in the
-    # csv called data. Save the resulting figure into a folder figures/scatterPlots/.
     for i in range(firstIndex, lastIndex):
         plt.scatter(data["yield"],data[colNames[i]],label=None)
         plt.xlabel("Actual Yield")
         plt.ylabel("Yield from Model " + colNames[i])
         model_txt = colNames[i] + " ~ Q('yield')"
         func = smf.ols(model_txt, data = data, missing='drop').fit()
-        plt.xlim((0,800))
-        plt.ylim((0,800))
-        straight = [i for i in range (0,800,1)]
+        # Change the range
+        theRange = 100
+        plt.xlim((0,theRange))
+        plt.ylim((0,theRange))
+        straight = [i for i in range (0,theRange,1)]
         plt.plot(straight, straight,'g-', label = "y = x")
         straightDf = pd.DataFrame(straight, columns = ['yield'])
         plt.plot(straight, func.predict(straightDf), 'r-',label='Predicted Yield vs. Actual Yield Best Fit')
diff -bur Potato/visualizationCode/plot_yield_response_lowess.py Tomato/visualizationCode/plot_yield_response_lowess.py
--- Potato/visualizationCode/plot_yield_response_lowess.py	2018-10-11 23:01:19.000000000 -0500
+++ Tomato/visualizationCode/plot_yield_response_lowess.py	2018-09-05 10:51:27.000000000 -0500
@@ -7,14 +7,12 @@
 lowess = sm.nonparametric.lowess
 homePath = os.getcwd()
 
-# Get the name of the crop that we wish to analyze
+# Load data
 os.chdir("../")
 with open("csvNameFile.txt") as f:
     content = f.readlines()
 os.chdir(homePath)
 cropName = content[1].strip()
-
-# Depending on the crop name, define the path where the preprocessed data we seek exists.
 dataLocation = ""
 if (cropName == "potato"):
     dataLocation = '../dataFiles/potato_with_anomaly.csv'
@@ -23,7 +21,6 @@
 if (cropName == "sweetcorn"):
     dataLocation = '../dataFiles/sweetcorn_with_anomaly.csv'
 
-# Read the data
 data = pd.read_csv(dataLocation,dtype={'FIPS':str})
 
 # Add logical filter to the yield Data
@@ -47,7 +44,6 @@
 #con = data['year']>2015
 
 
-# Plot the lowess curves
 numberMonths = 5
 variableTypes = 4
 fig, axes = plt.subplots(numberMonths, variableTypes, figsize=(12,6))
@@ -82,8 +78,7 @@
 axes[1,0].text(-0.4,0.7,'Yield Anomaly (t/ha)',transform=axes[1,0].transAxes, 
                fontsize=10,rotation=90)
 
-# Add knots. The code below is just a sample of whata dding knots would require.
-# It is not functional code that is useful for our analysis.
+# Add knots
 
 # VPD
 # axes[1,0].text(1,0.925,'knots: 6.825,11.975,21.124',transform=axes[1,0].transAxes, 
@@ -114,5 +109,7 @@
 
 plt.subplots_adjust(top=0.95, bottom=0.05, left=0.075, right=0.925, hspace=0.3)
 
+# # plt.xticks(range(5,30,2))
+# # plt.xticks(range(0,400,25))
 plt.savefig('./figures/figure_yield_response_lowess.png')
 print('figure saved')
diff -bur Potato/visualizationCode/showKnots.py Tomato/visualizationCode/showKnots.py
--- Potato/visualizationCode/showKnots.py	2018-10-11 23:08:34.000000000 -0500
+++ Tomato/visualizationCode/showKnots.py	2018-09-01 12:48:49.000000000 -0500
@@ -14,41 +14,26 @@
 
 
 def load_yield_data():
-    # Get the name of the crop we wish to examine
     os.chdir("../")
     with open("csvNameFile.txt") as f:
         content = f.readlines()
     os.chdir(homePath)
-    cropName = content[1]
-
-    # Load the preprocessed data that we wish to examine
+    cropName = content[1].strip()
     data = pd.read_csv("../dataFiles/" + cropName + "_with_anomaly.csv",dtype={'FIPS':str})
     return data
 
 def printOffByOne():
-    '''
-    Depict the knots appearing on a lowess curve for hardcoded variants of predictors
-    one at a time, so that we can look at them more clearly.
-    '''
     data = load_yield_data()
     numberColumns = 5
-
-    # Define the first and lst string that will appear in an array of variables that
-    # we wish to visualize lowess curves + knots for
     firstEntry = 'tmax5'
     lastEntry = 'precip9'
     colNames = list(data)
-    # Get the corresponding indices (in the columns of hte data frame)
-    # for the first and last string appearing in aforementioned
-    # array of variables
     firstIndex =colNames.index(firstEntry)
     lastIndex = colNames.index(lastEntry)
     numberTypesOfVariables = 5
     months = 5
-    # Specify the variables that week to plot knots atop lowess curves for
     variables = ['tave5', 'tave6', 'tave7', 'tave8', 'tave9', 'vpdave5', 'vpdave6', 'vpdave7', 'vpdave8', 'vpdave9', 'precip5', 'precip6', 'precip7', 'precip8', 'precip9']
 
-    # Specify the knots ((x,y) coordinates) of the selected predictors
     tave5Knots = [(11.433,117.610),(13.5398,-14.5927),(15.5924,-12.5801),(20.123,-115.226)]
     tave6Knots = [(15.434,21.635),(20.7844,-26.6687),(25.129,-127.302)]
     tave7Knots = [(19.730,-10.567),(21.224,-0.504),(23.179,-10.567),(27.604,-131.327)]
@@ -95,35 +80,24 @@
 
 
 def printAll():
-    '''
-    Depict all lowess curves for hardcoded variants of predictors
-    in one visualization, so that we can look at them more clearly.
-    '''
     data = load_yield_data()
     numberColumns = 5
-    # Define the first and lst string that will appear in an array of variables that
-    # we wish to visualize lowess curves + knots for
     firstEntry = 'tmax5'
     lastEntry = 'lstmax9'
     colNames = list(data)
-    # Get the corresponding indices (in the columns of hte data frame)
-    # for the first and last string appearing in aforementioned
     firstIndex =colNames.index(firstEntry)
     lastIndex = colNames.index(lastEntry)
     numberTypesOfVariables = 5
     months = 5
     f, axarr = plt.subplots(numberTypesOfVariables, months)
-    # Specify the variables that week to plot knots atop lowess curves for
     variables = ['tave5', 'tave6', 'tave7', 'tave8', 'tave9', 'vpdave5', 'vpdave6', 'vpdave7', 'vpdave8', 'vpdave9', 'precip5', 'precip6', 'precip7', 'precip8', 'precip9', 'evi5', 'evi6', 'evi7', 'evi8', 'evi9', 'lstmax5', 'lstmax6', 'lstmax7', 'lstmax8', 'lstmax9']
-    # Print all lowess curves in one panoramic diagram
+    print(firstIndex, lastIndex)
     print(colNames)
     for i in range(len(variables)):
             axarr[int(i/numberColumns), int(i%numberColumns)].plot(data[variables[i]], data["yield_rainfed_ana"],'bx')
             axarr[int(i/numberColumns), int(i%numberColumns)].set_title([variables[i]])
             Z = lowess(data['yield_rainfed_ana'], data[variables[i]],frac=0.3,it=3)
             axarr[int(i/numberColumns), int(i%numberColumns)].plot(Z[:,0], Z[:,1], 'g-', lw=5)
-
-    # TODO: Figure out what this code does:
     # for i in range(firstIndex, lastIndex - firstIndex + 1):
         # if (colNames[firstIndex+i] in variables):
             # print(i)
diff -bur Potato/visualizationCode/showTrend.py Tomato/visualizationCode/showTrend.py
--- Potato/visualizationCode/showTrend.py	2018-09-01 10:10:13.000000000 -0500
+++ Tomato/visualizationCode/showTrend.py	2018-09-01 12:42:45.000000000 -0500
@@ -12,9 +12,9 @@
 def yield_trend(df, yield_type='rainfed'):
     # Estimate yield trend and detrend
     # Linear Trend
-    trend_model_txt =  "Q('%s')"%"yield" + "~ year"
+    # trend_model_txt =  "Q('%s')"%"yield" + "~ year"
     # Quadratic Trend
-    # trend_model_txt =  "Q('%s')"%"yield" + "~ year + np.power(year,2)"
+    trend_model_txt =  "Q('%s')"%"yield" + "~ year + np.power(year,2)"
     trend_results = smf.ols(trend_model_txt, data=df).fit()
     return trend_results
 
